package uk.co.tyharness.archytas;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.opengles.GL10;



public class Axes {

private FloatBuffer vertexBuffer;  // Buffer for vertex-array
private FloatBuffer colorBuffer;

 private float vertices[] = {
    0.0f,  0.0f, 0.0f,
    1.0f,  0.0f, 0.0f,
    0.0f,  0.0f, 0.0f,
    0.0f,  1.0f, 0.0f,
    0.0f,  0.0f, 0.0f,
    0.0f,  0.0f, 1.0f
 };

 //red x
 //green y
 //blue z

private float[] colors = {
 1.0f,  0.0f, 0.0f, 1.0f,
 1.0f,  0.0f, 0.0f, 1.0f,
 0.0f,  1.0f, 0.0f, 1.0f,
 0.0f,  1.0f, 0.0f, 1.0f,
 0.0f,  0.0f, 1.0f, 1.0f,
 0.0f,  0.0f, 1.0f, 1.0f
};




public Axes() {   //Constructor
   // Setup vertex-array buffer. Vertices in float. An float has 4 bytes
      ByteBuffer vbb = ByteBuffer.allocateDirect(vertices.length * 4);
      vbb.order(ByteOrder.nativeOrder()); // Use native byte order
      vertexBuffer = vbb.asFloatBuffer(); // Convert from byte to float
      vertexBuffer.put(vertices);         // Copy data into buffer
      vertexBuffer.position(0);           // Rewind


  // Setup color-array buffer. Colors in float. An float has 4 bytes
    ByteBuffer cbb = ByteBuffer.allocateDirect(colors.length * 4);
    cbb.order(ByteOrder.nativeOrder());
    colorBuffer = cbb.asFloatBuffer();
    colorBuffer.put(colors);
    colorBuffer.position(0);


  }





public void draw(GL10 gl) {


    gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
    gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);

    gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
    gl.glColorPointer(4, GL10.GL_FLOAT, 0, colorBuffer);

    gl.glDrawArrays(gl.GL_LINES, 0, 6);

    gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
    gl.glDisableClientState(GL10.GL_COLOR_ARRAY);

  }


} //end point Line
